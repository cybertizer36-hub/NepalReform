# AWS Lambda-specific Dockerfile
# Uses the AWS Lambda Node.js runtime base image

FROM public.ecr.aws/lambda/nodejs:20 AS base

# Set environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Install pnpm
RUN npm install -g pnpm@latest

# Dependencies stage
FROM base AS deps

# Copy package files
COPY package.json pnpm-lock.yaml* ${LAMBDA_TASK_ROOT}/

# Install dependencies
WORKDIR ${LAMBDA_TASK_ROOT}
RUN pnpm install --frozen-lockfile --prod=false

# Builder stage
FROM base AS builder

# Copy dependencies and source code
COPY --from=deps ${LAMBDA_TASK_ROOT}/node_modules ./node_modules
COPY . ${LAMBDA_TASK_ROOT}/

WORKDIR ${LAMBDA_TASK_ROOT}

# Create placeholder env for build
RUN echo "NEXT_PUBLIC_SUPABASE_URL=placeholder" > .env.local && \
    echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=placeholder" >> .env.local && \
    echo "SUPABASE_SERVICE_ROLE_KEY=placeholder" >> .env.local && \
    echo "NEXT_PUBLIC_SITE_URL=placeholder" >> .env.local

# Build the Next.js application
RUN pnpm build

# Final Lambda runtime image
FROM public.ecr.aws/lambda/nodejs:20

ENV NODE_ENV=production

# Install pnpm in final stage
RUN npm install -g pnpm@latest

# Copy the built application
COPY --from=builder ${LAMBDA_TASK_ROOT}/.next/standalone ${LAMBDA_TASK_ROOT}/
COPY --from=builder ${LAMBDA_TASK_ROOT}/public ${LAMBDA_TASK_ROOT}/public
COPY --from=builder ${LAMBDA_TASK_ROOT}/.next/static ${LAMBDA_TASK_ROOT}/.next/static

# Create lambda handler
COPY lambda-handler.js ${LAMBDA_TASK_ROOT}/

# Set the Lambda handler
CMD ["lambda-handler.handler"]
